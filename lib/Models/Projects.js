// Generated by CoffeeScript 1.6.2
(function() {
  var BaseModel, Projects, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./BaseModel');

  Projects = (function(_super) {
    __extends(Projects, _super);

    function Projects() {
      this.create = __bind(this.create, this);
      this.show = __bind(this.show, this);
      this.all = __bind(this.all, this);
      this.init = __bind(this.init, this);      _ref = Projects.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Projects.prototype.init = function() {
      this.members = this.load('ProjectMembers');
      return this.hooks = this.load('ProjectHooks');
    };

    Projects.prototype.all = function(fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::all()");
      return this.get("projects", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.show = function(projectId, fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::show()");
      return this.get("projects/" + (parseInt(projectId)), function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.create = function(name, params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::create()");
      params.name = name;
      return this.post("projects", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    return Projects;

  })(BaseModel);

  module.exports = function(client) {
    return new Projects(client);
  };

}).call(this);
