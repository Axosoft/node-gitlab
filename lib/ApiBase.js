// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  module.exports.ApiBase = (function() {
    function ApiBase(options) {
      this.options = options;
      this.init = __bind(this.init, this);
      this.debug = __bind(this.debug, this);
      this.log = __bind(this.log, this);
      this.handleOptions = __bind(this.handleOptions, this);
      this.handleOptions();
      this.init();
      this.debug("ApiBase::constructor()");
    }

    ApiBase.prototype.handleOptions = function() {
      var _base;
      if ((_base = this.options).verbose == null) {
        _base.verbose = false;
      }
      return this.debug("ApiBase::handleOptions()");
    };

    ApiBase.prototype.log = function() {
      var args, name, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      name = (typeof this !== "undefined" && this !== null ? (_ref = this.constructor) != null ? typeof _ref.toString === "function" ? (_ref1 = _ref.toString().match(/function\s*(\w+)/)) != null ? _ref1[1] : void 0 : void 0 : void 0 : void 0) || 'ApiBase';
      return console.log.apply(console, ["" + name + ">"].concat(__slice.call(args)));
    };

    ApiBase.prototype.debug = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.options.verbose !== false) {
        return this.log.apply(this, args);
      }
    };

    ApiBase.prototype.init = function() {
      this.client = this;
      this.debug("ApiBase::init()");
      this.groups = require('./Models/Groups')(this.client);
      this.projects = require('./Models/Projects')(this.client);
      this.issues = require('./Models/Issues')(this.client);
      return this.users = require('./Models/Users')(this.client);
    };

    return ApiBase;

  })();

}).call(this);
